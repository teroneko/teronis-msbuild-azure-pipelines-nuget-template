# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master
      - develop
      - releases/*
      - features/*
      - pull-requests/*
      - hotfixes/*
      - support/*
  tags:
    exclude:
      - '*'

variables:
  - template: shared-variables.yml

jobs:
  - template: publish-build-artifacts-job.yml
    parameters:
      jobName: ${{ variables.publishBuildArtifactsJobName }}
      vmImage: ${{ variables.vmImage }}
      publishBuildArtifactsArtifactName: ${{ variables.publishBuildArtifactsArtifactName }}

  #######################
  - job: PrepareNuGetPush
    dependsOn: ${{ variables.publishBuildArtifactsJobName }}
    pool:
      vmImage: ${{ variables.vmImage }}
    displayName: Prepare Nuget Push

    steps:
        # [string]$... -> string array to single string
      - powershell: '[string]$(git log -n 1 --format=%B) | % { Write-Host $_; echo "##vso[task.setvariable variable=commitMessage;isOutput=true]$_" }'
        displayName: Store Commit Message 
        name: git

      - powershell: Write-Host $(git.commitMessage)
        displayName: Display Commit Message

      - powershell: |
          -not ("$(git.commitMessage)" -match [System.Text.RegularExpressions.Regex]::Escape("[skip nuget.local]")) | 
            % { Write-Host $_; echo "##vso[task.setvariable variable=doJobNuGetLocalPushArtifacts;isOutput=true]$_" }
        displayName: Set DoJobNuGetLocalPushArtifacts Variable
        name: setDoJobNuGetLocalPushArtifacts

      - powershell: |
          ("$(git.commitMessage)" -match [System.Text.RegularExpressions.Regex]::Escape("[push nuget.org]")) -and (-not ("$(git.commitMessage)" -match [System.Text.RegularExpressions.Regex]::Escape("[skip nuget.org]"))) |
            % { Write-Host $_; echo "##vso[task.setvariable variable=doJobNuGetOrgPushArtifacts;isOutput=true]$_" }
        displayName: Set SetDoJobNuGetOrgPushArtifacts Variable
        name: setDoJobNuGetOrgPushArtifacts

  ##############################
  - job: NuGetLocalPushArtifacts
    dependsOn: PrepareNuGetPush
    condition: and(succeeded(), eq(dependencies.PrepareNuGetPush.outputs['setDoJobNuGetLocalPushArtifacts.doJobNuGetLocalPushArtifacts'], 'TRUE'))
    variables:
      - name: nugetArguments
        value: '-ConfigFile $(Build.SourcesDirectory)\nuget.config -Source "nuget.local" -ApiKey optional -SkipDuplicate -Verbosity detailed'
    displayName: 'Push "nuget.local" Artifacts'
    pool:
      vmImage: ${{ variables.vmImage }}
    steps:
      - task: DownloadBuildArtifacts@0
        displayName: Download NuGet Packages
        inputs:
          buildType: current
          artifactName: '${{ variables.publishBuildArtifactsArtifactName }}'
          downloadPath: '$(Build.StagingDirectory)'
      
      - task: NuGetToolInstaller@1

      - script: nuget push $(Build.StagingDirectory)\${{ variables.publishBuildArtifactsArtifactName }}\**\*.nupkg $(nugetArguments) -NoSymbols
        env:
          NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED: true
          VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '$(VSS_NUGET_EXTERNAL_FEED_ENDPOINTS)'
        displayName: Push NuGet Packages

      - task: PowerShell@2
        inputs:
          filePath: '$(Build.SourcesDirectory)\build\push-nuget-packages.ps1'
          arguments:
            $(Build.StagingDirectory)\${{ variables.publishBuildArtifactsArtifactName }}\**\*.snupkg
            -Arguments '$(nugetArguments)'
            -ContinueOnError 1
        env:
          NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED: true
          VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '$(VSS_NUGET_EXTERNAL_FEED_ENDPOINTS)'
        displayName: Push NuGet Symbol Packages

  ############################
  - job: NuGetOrgPushArtifacts
    dependsOn: PrepareNuGetPush
    condition: and(succeeded(), eq(dependencies.PrepareNuGetPush.outputs['setDoJobNuGetOrgPushArtifacts.doJobNuGetOrgPushArtifacts'], 'TRUE'))
    variables:
      - name: nugetArguments
        value: '-ConfigFile $(Build.SourcesDirectory)\nuget.config -Source "nuget.org" -SkipDuplicate -Verbosity detailed'
    displayName: 'Push "nuget.org" Artifacts'
    pool:
      vmImage: ${{ variables.vmImage }}
    steps:
      - task: DownloadBuildArtifacts@0
        displayName: Download NuGet Packages
        inputs:
          buildType: current
          artifactName: '${{ variables.publishBuildArtifactsArtifactName }}'
          downloadPath: '$(Build.StagingDirectory)'
          
      - task: NuGetToolInstaller@1

      - script: nuget push $(Build.StagingDirectory)\${{ variables.publishBuildArtifactsArtifactName }}\**\*.nupkg $(nugetArguments) -ApiKey $(NUGET_ORG_APIKEY) -NoSymbols
        displayName: Push NuGet Packages

      - task: PowerShell@2
        inputs:
          filePath: '$(Build.SourcesDirectory)\build\push-nuget-packages.ps1'
          arguments:
            $(Build.StagingDirectory)\${{ variables.publishBuildArtifactsArtifactName }}\**\*.snupkg
            -Arguments '$(nugetArguments) -ApiKey $Env:NUGET_ORG_APIKEY'
            -ContinueOnError 1
        env:
          NUGET_ORG_APIKEY: $(NUGET_ORG_APIKEY)
        displayName: Push NuGet Symbol Packages